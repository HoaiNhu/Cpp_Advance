Bộ nhớ máy tính

Bộ nhớ máy tính là một dãy các ô nhớ nằm liên tiếp nhau, mỗi một ô nhớ sẽ lưu 1 byte dữ liệu và dữ liệu của bạn sẽ nằm trong các ô nhớ này. Để truy xuất được vào một ô nhớ bạn cần biết được vị trí (địa chỉ) của ô nhớ đó.

Biến

Biến là một ô nhớ hoặc một vùng nhớ được hệ điều hành cấp phát cho chương trình. Một biến sẽ gồm 2 phần là địa chỉ của biến (địa chỉ của ô nhớ chứa biến) và giá trị của biến (giá trị của ô nhớ chứa biến).

Giá trị của biến là gì thì chắc bạn cũng đã biết. Ví dụ để hiển thị ra màn hình giá trị của biến a bạn có thể làm như sau:

// In ra giá trị của biến a.
cout << "Value of a: " << a; 
Địa chỉ của biến chính là địa chỉ của ô nhớ chứa biến. Bạn có thể dùng toán tử & để lấy ra địa chỉ của một biến. Ví dụ chương trình hiển thị địa chỉ của biến a:

#include<iostream>

using namespace std;

int main() {
    int a = 5;
    // In ra địa chỉ của biến a.
    cout << "Address of a: " << &a;
    return 0;
}
Kết quả khi chạy chương trình:

Address of a: 00F3FA48
Giải thích: biến a đang nằm trên vùng nhớ có địa chỉ là 00F3FA48.

00F3FA48 chính là địa chỉ của biến a được hiển thị dưới hệ cơ số 16, để hiển thị được địa chỉ của một biến dưới hệ cơ số 10 (hệ cơ số 10 chính là các số mà bạn sử dụng thường ngày như 1, 2, 3, 84, 23, 4324, ...) bạn làm như sau:

cout << "Address of a: " << (int)&a;
Kết quả:

Address of a: 15989320
Bạn có thể lấy ra hoặc thay đổi giá trị tại 1 địa chỉ bằng toán tử *. Ví dụ để lấy ra giá trị của biến a bạn có thể lấy ra giá trị tại địa chỉ của ô nhớ chứa biến a như chương trình sau:

#include<iostream>

using namespace std;

int main() {
	int a = 5;
	cout << "Value of a: " << *(&a);
	return 0;
}
Kết quả khi chạy chương trình:

Value of a: 5
Bạn cũng có thể thay đổi giá trị của biến a thông qua địa chỉ của nó như chương trình sau:

#include<iostream>

using namespace std;

int main() {
	int a = 5;
	*(&a) = 9;
	cout << "Value of a: " << *(&a);
	return 0;
}
Kết quả khi chạy chương trình:

Value of a: 9
Khi bạn thực hiện thay đổi hay lấy ra giá trị của một biến thì thực chất chương trình sẽ tìm tới ô nhớ chứa biến này (thông qua địa chỉ của biến) và thao tác trên ô nhớ đó.

Vậy nếu biết được địa chỉ của 1 biến thì bạn có thể thay đổi hoặc lấy ra giá trị của biến đó.

Con trỏ
Con trỏ là một dạng đặc biệt của biến, do cũng là 1 biến nên nó cũng có địa chỉ và giá trị, nó khác các biến bình thường ở chỗ giá trị của 1 con trỏ chính là địa chỉ của 1 biến khác. Cú pháp để khai báo một con trỏ:

Kiểu_dữ_liệu *tên_con_trỏ; // Ví dụ: int *p;
Ví dụ về con trỏ:

#include<iostream>

using namespace std;

int main() {
	// Khai báo biến a;
	int a = 5;
	// Khai báo con trỏ p
	int* p;
	// Cho con trỏ p trỏ tới biến a.
	p = &a;
	// In ra địa chỉ của biến a và giá trị của con trỏ p.
	cout << "Address of a: " << &a << endl;
	cout << "Value of p: " << p << endl;
	return 0;
}
Output là

Address of a: 0039FE9C
Value of p: 0039FE9C
Có thể thấy giá trị của con trỏ p bằng với địa chỉ của biến a. Vậy bạn có thể thay đổi giá trị của biến a thông qua con trỏ p như chương trình sau:

#include<iostream>

using namespace std;

int main() {
	// Khai báo biến a
	int a;
	// Khai báo con trỏ p
	int* p;
	// Cho con trỏ p trỏ tới địa chỉ của biến a
	p = &a;
	// Thay đổi giá trị của biến a thông qua con trỏ p
	*p = 7;
	// In ra giá trị của biến a sau khi thay đổi
	cout << "Value of a: " << a;
	return 0;
}
Kết quả khi chạy chương trình:

Value of a: 7

-----------------------------------------------------------------
Ở bài trước bạn đã hiểu sơ qua về con trỏ, bài này sẽ giúp bạn hiểu sâu hơn về nó. Trước hết bạn cần hiểu được kích thước của một biến là gì. Kích thước của một biến chính là số byte mà chương trình dùng để cấp cho ô nhớ/vùng nhớ chứa biến đó. Ví dụ nếu bạn khai báo biến a kiểu int thì chương trình sẽ dùng 4 ô nhớ để lưu trữ biến a và giá trị của biến a chính là giá trị của 4 ô nhớ. Dưới đây là bảng thể hiện miền giá trị và kích thước của các kiểu dữ liệu:

Kiểu dữ liệu	Kích thước	Miền giá trị
char	1byte	-127 tới 127
unsigned char	1byte	0 tới 255
int	4bytes	-2147483648 tới 2147483647
unsigned int	4bytes	0 tới 4294967295
short	2bytes	-32768 tới 32767
unsigned short	2bytes	0 tới 65,535
long long	8bytes	-(263) tới (263) - 1
unsigned long long	8bytes	0 tới 18446744073709551615
float	4bytes	 
double	8bytes	 
Trong C++ bạn có thể dùng hàm sizeof() để lấy ra kích thước của một biến hoặc một kiểu dữ liệu. Ví dụ chương trình sau:

#include <iostream>

using namespace std;

int main() {
	cout << "size of char: " << sizeof(char) << endl;
	cout << "size of int: " << sizeof(int) << endl;
	cout << "size of short: " << sizeof(short) << endl;
	cout << "size of long long: " << sizeof(long long) << endl;
	cout << "size of float: " << sizeof(float) << endl;
	cout << "size of double: " << sizeof(double) << endl;
	return 0;
}
Kết quả khi chạy chương trình:

size of char: 1
size of int: 4
size of short: 2
size of long long: 8
size of float: 4
size of double: 8
Ngoài các kiểu dữ liệu cơ bản này ra thì con trỏ cũng là 1 kiểu dữ liệu nên nó cũng có kích thước, câu hỏi của bài này là kích thước của con trỏ kiểu char* là bao nhiêu. Một số bạn sẽ nghĩ kích thước của kiểu char là 1 nên kích thước của con trỏ kiểu char* cũng sẽ là 1 (điều này là sai). Trước hết bạn hãy chạy thử chương trình sau:

#include <iostream>

using namespace std;

int main() {
	int number = 9;
	int* p1 = &number;
	char* p2 = (char*)&number;
	double* p3 = (double*)&number;
	cout << "size of p1: " << sizeof(p1) << endl;
	cout << "size of p2: " << sizeof(p2) << endl;
	cout << "size of p3: " << sizeof(p3) << endl;
	return 0;
}
Kết quả có thể sẽ làm bạn bất ngờ, có thể output trên máy bạn sẽ là:

size of p1: 4
size of p2: 4
size of p3: 4
Và cũng có thể output trên máy bạn là

size of p1: 8
size of p2: 8
size of p3: 8
Có thể thấy kích thước của các con trỏ kiểu char*, int* và double* là như nhau. Nếu bạn build ứng dụng trên platform x64 thì kích thước của con trỏ sẽ là 8, ngược lại nếu bạn build ứng dụng trên platform x86 thì kích thước của con trỏ sẽ là 4. Nếu bạn không hiểu build ứng dụng x64 và x86 là gì thì build ứng dụng x64 là tạo ra ứng dụng 64 bit, build x86 là tạo ra ứng dụng 32 bit.

Lý do kết quả có thể là 4 hoặc 8 là do giá trị của một con trỏ luôn là 1 địa chỉ mà ứng dụng x32 sẽ có 232 địa chỉ (232 ô nhớ - tương đương với kiểu dữ liệu có kích thước 4 byte), ứng dụng x64 sẽ có 264 địa chỉ (264 ô nhớ - tương đương với kiểu dữ liệu có kích thước 8 byte) nên con trỏ cần phải được cấp phát đủ bộ nhớ để lưu trữ được các địa chỉ này. Vì thế nên kích thước của con trỏ sẽ phụ thuộc vào platform mà bạn build.

Có thể bạn sẽ thắc mắc: vậy sự khác biệt giữa con trỏ char* và con trỏ int* là gì?

Sự khác biệt là con trỏ char* sẽ lấy byte đầu tiên trong vùng nhớ mà nó trỏ tới làm giá trị và con trỏ int* sẽ lấy 4 byte đầu tiên trong vùng nhớ mà nó trỏ tới làm giá trị.

Ví dụ chương trình sau:

#include <iostream>

using namespace std;

int main() {
	int a = 1005000000;
	int* p1 = &a;
	char* p2 = (char*)&a;
	cout << "*p1 = " << *p1 << endl;
	cout << "*p2 = " << (int)*p2;
	return 0;
}
Kết quả khi chạy chương trình:

*p1 = 1005000000
*p2 = 64
Giải thích: 4 byte tính từ địa chỉ của biến a có giá trị là 1005000000, 1 byte tính từ địa chỉ biến a có giá trị là 64 (còn phụ thuộc vào big endian và little endian nhưng tạm thời bạn chưa cần quan tâm).

------------------------------------------------------------------------------------
//Tham trị & tham chiếu
Đầu tiên bạn hãy chạy thử chương trình sau:

#include <iostream>

using namespace std;

void inc(int a) {
    a++;
}

int main() {
    int a = 5;
    inc(a);
    cout << "Value of a: " << a;
    return 0;
}
Kết quả khi chạy chương trình:

Value of a: 5
Bạn có thể nhận thấy giá trị của biến a sau khi gọi hàm inc() là không thay đổi (vẫn là 5). Giải thích:

Khi bạn gọi hàm inc(a); thì thực chất là bạn đang lấy giá trị tại ô nhớ chứa biến a trong hàm main() và copy giá trị đó vào ô nhớ chứa biến a trong hàm inc(), vậy có nghĩa là biến a trong hàm main() và biến a trong hàm inc() là 2 biến khác hoàn toàn nhau (không cùng 1 ô nhớ) nên bạn thay đổi biến này cũng sẽ không ảnh hưởng tới biến kia.

Tiếp theo bạn hãy chạy thử chương trình sau:

#include <iostream>

using namespace std;

void inc(int* p) {
    (*p)++;
}

int main() {
    int a = 5;
    inc(&a);
    cout << "Value of a: " << a;
    return 0;
}
Kết quả khi chạy chương trình:

Value of a: 6
Có thể thấy giá trị của biến a đã được thay đổi sau khi gọi hàm inc(), tới đây nhiều bạn mới học lập trình sẽ nghĩ rằng trong đoạn code trên giá trị của biến a được thay đổi khi gọi hàm inc là do biến a được truyền tham chiếu (điều này là sai). Nếu bạn không biết truyền tham trị và tham chiếu là gì thì mình sẽ giải thích:

Truyền tham trị

Như ở ví dụ đầu tiên, biến a được truyền tham trị vào hàm inc() dẫn tới giá trị của nó không thay đổi, truyền tham trị là truyền giá trị của một biến vào một biến khác (truyền giá trị của một ô nhớ vào một ô nhớ khác).

Truyền tham chiếu

Một biến được truyền tham chiếu khi biến đó có cùng địa chỉ với biến được truyền. Để dễ hiểu hơn hãy xem ví dụ về truyền tham chiếu trong ngôn ngữ lập trình C++ (C++ hỗ trợ truyền tham chiếu thông qua toán tử &):

#include <iostream>

using namespace std;

void inc(int& a) {
	a++;
	cout << "Address of a in inc function: " << &a << endl;
}

int main() {
	int a = 5;
	inc(a);
	cout << "Address of a in main function: " << &a << endl;
	cout << "Value of a: " << a;
	return 0;
}
Kết quả khi chạy chương trình:

Address of a in inc function: 010FFAEC
Address of a in main function: 010FFAEC
Value of a: 6
Có thể thấy địa chỉ của biến a trong hàm main() và trong hàm inc() là giống hệt nhau nên đây mới đúng là truyền tham chiếu.

Quay lại ví dụ thứ 2: Bạn thay đổi được giá trị của biến a trong hàm inc() là do bạn truyền địa chỉ của biến a vào con trỏ p trong hàm inc() và lúc này con trỏ p đang trỏ tới ô nhớ chứa biến a nên những thay đổi mà con trỏ p thực hiện sẽ ảnh hưởng tới biến a dẫn tới giá trị của a được thay đổi (về bản chất thì đây không phải truyền tham chiếu).

Ngoài C++ ra thì C# cũng hỗ trợ cả truyền tham và truyền tham chiếu, Java và C chỉ hỗ trợ truyền tham trị.

Tổng kết lại, nếu muốn thay đổi giá trị của một biến thông qua hàm thì phải truyền tham chiếu hoặc truyền địa chỉ của biến đó vào hàm.

----------------------------------------------------------------------------------------
Do không cùng một chương trình nên bạn không thể dùng toán tử & để lấy ra địa chỉ của biến trong chương trình khác. Để cho con trỏ trỏ tới 1 địa chỉ mà không sử dụng toán tử & bạn có thể dùng câu lệnh sau:

// Cho con trỏ p trỏ tới địa chỉ 5241044
int* p = reinterpret_cast<int*>(5241044);
Ví dụ chương trình sau:

#include<iostream>

using namespace std;

int main() {
	int a = 5;
	cout << (int)&a << endl;
	int address;
	cin >> address;
	int* p = reinterpret_cast<int*>(address);
	*p = 10;
	cout << a;
	return 0;
}
Khi chạy chương trình bạn hãy nhập vào địa chỉ của biến a và kết quả sẽ là:

10
Có thể thấy bạn có thể cho con trỏ p trỏ tới bất cứ đâu trên bộ nhớ nhưng đáp án của bài này là không thể.

Giải thích: khi ứng dụng của bạn chạy, hệ điều hành sẽ cấp cho nó một vùng nhớ ảo và con trỏ của bạn sẽ trỏ tới vùng nhớ ảo này chứ không thể trỏ tới vùng nhớ ảo của ứng dụng khác. Hơn nữa địa chỉ mà bạn nhìn thấy là địa chỉ ảo, không phải địa chỉ trên bộ nhớ vật lý nên bạn cũng không thể dùng địa chỉ này để thay đổi giá trị của biến trong chương trình khác.

